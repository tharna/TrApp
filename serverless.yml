service: trapp

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-west-1

  environment:
    USER_TABLE: "userdata-${opt:stage, self:provider.stage}"
    EXERCISE_TABLE: "exercisedata-${opt:stage, self:provider.stage}"
    ACTIVITY_TABLE: "activitydata-${opt:stage, self:provider.stage}"
    ACHIEVEMENT_TABLE: "achievement-${opt:stage, self:provider.stage}"
    QUEST_TABLE: "quest-${opt:stage, self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

functions:
  getExercises:
    memorySize: 128
    handler: handler.get
    events:
      - http:
          path: data
          method: get
          cors: true
  getExercisesByType:
    memorySize: 128
    handler: handler.getByType
    events:
      - http:
          path: data/type/{type}
          method: get
          cors: true
  addExercise:
    memorySize: 128
    handler: handler.submit
    events:
      - http:
          path: data
          method: post
          cors: true
  getActivity:
    memorySize: 128
    handler: handler.getActivity
    events:
      - http:
          path: data/activity
          method: get
          cors: true
  getUser:
    memorySize: 128
    handler: handler.getUser
    events:
      - http:
          path: data/user
          method: get
          cors: true
  getQuests:
    memorySize: 128
    handler: handler.getQuests
    events:
      - http:
          path: data/quest
          method: get
          cors: true
  postQuest:
    memorySize: 128
    handler: handler.postQuest
    events:
      - http:
          path: data/quest
          method: post
          cors: true
  getAchievements:
    memorySize: 128
    handler: handler.getAchievements
    events:
      - http:
          path: data/achievement
          method: get
          cors: true
  ## ADMIN
  listQuests:
    memorySize: 128
    handler: admin.listQuests
    events:
      - http:
          path: admin/quest
          method: get
          cors: true
  addQuest:
    memorySize: 128
    handler: admin.addQuest
    events:
      - http:
          path: admin/quest/add
          method: post
          cors: true
  updateQuest:
    memorySize: 128
    handler: admin.updateQuest
    events:
      - http:
          path: admin/quest/update
          method: post
          cors: true
  deleteQuest:
    memorySize: 128
    handler: admin.deleteQuest
    events:
      - http:
          path: admin/quest/delete
          method: post
          cors: true
 
resources:
  Resources:
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "userID"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "userID"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.USER_TABLE}
    ExerciseDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "userID"
            AttributeType: "S"   
          -
            AttributeName: "date"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "userID"
            KeyType: "HASH"
          -
            AttributeName: "date"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.EXERCISE_TABLE}
    ActivityDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "userID"
            AttributeType: "S"   
          -
            AttributeName: "date"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "userID"
            KeyType: "HASH"
          -
            AttributeName: "date"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.ACTIVITY_TABLE}
    AchievementDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "userID"
            AttributeType: "S"
          -
            AttributeName: "achievementID"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "userID"
            KeyType: "HASH"
          -
            AttributeName: "achievementID"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.ACHIEVEMENT_TABLE}
    QuestDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "questID"
            AttributeType: "S"
          -
            AttributeName: "groupID"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "questID"
            KeyType: "HASH"
          -
            AttributeName: "groupID"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.QUEST_TABLE}
plugins:
  - serverless-finch

custom:
  client:
    bucketName: app.aikojentanssi.fi
    distributionFolder: spa/dist
